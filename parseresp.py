class ListUpdateHashesOperations(object):
    def __init__(self, jsoninput):
        if not jsoninput["compressionType"] == "RAW":
            raise ValueError("Only RAW compression supported")

        rawobject = jsoninput["rawHashes"]
        prefixlen = rawobject["prefixSize"]
        rawhashes = rawobject["rawHashes"]

        if not (len(rawhashes)%prefixlen) == 0:
            raise IndexError("Raw hashes mismatch on prefixes", rawhashes, prefixlen)

        self.prefix = prefixlen
        self.hashes = []
        
        for pos in xrange(len(rawhashes)/prefixlen):
            self.hashes.append(rawhashes[:prefixlen])
            rawhashes = rawhashes[prefixlen:]
    
    def __str__(self):
        strobj = ""
        strobj += "PrefixLen: " + str(self.prefix) + ", "
        strobj += "Hashes: " + str(self.hashes) + "\n"
        return strobj

class ListUpdateResponse(object):
    def __init__(self, jsonresponse):
        self.__parse(jsonresponse)

    def __parse(self, jsonresponse):
        if jsonresponse['responseType'] == "RESPONSE_TYPE_UNSPECIFIED":
            raise KeyError("Key listUpdateResponses not valid", jsonresponse)

        self.responsetype = jsonresponse['responseType']
        self.threattype = jsonresponse['threatType']
        self.client = {"state": jsonresponse['newClientState'], "checksum": jsonresponse['checksum'] }
        self.additions = []
        self.removals = []
        if jsonresponse.has_key('additions'):
            self.additions = [ListUpdateHashesOperations(x) for x in jsonresponse['additions']]
        if jsonresponse.has_key('removals'):
            self.removals = [ListUpdateHashesOperations(x) for x in jsonresponse['removals']]

    def __str__(self):
        strobj = ""
        strobj += "ResponseType: " + str(self.responsetype) + ", "
        strobj += "ThreatType: " + str(self.threattype) + ", "
        strobj += "ClientStatus: " + str(self.client) + "\n"
        strobj += "Additions: " + "".join(["\n\t" + str(x) for x in self.additions])
        strobj += "Removals: " + "".join(["\n\t" + str(x) for x in self.removals])
        return strobj  
    
fakeresponse={'listUpdateResponses': [{'responseType': 'FULL_UPDATE', 'threatType': 'MALWARE', 'newClientState': 'ChAIARAGGAEiAzAwMSiAEDABEORLGgIYBU5xMc8=', 'checksum': {'sha256': 'cvCW85eFQKk5aFCVPIPil30bVaTwucpmLtipxEz5hPc='}, 'threatEntryType': 'URL', 'additions': [{'compressionType': 'RAW', 'rawHashes': {'prefixSize': 4, 'rawHashes': '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'}}], 'platformType': 'ANY_PLATFORM'}], 'minimumWaitDuration': '1827.425s'}

responses = [ListUpdateResponse(y) for y in fakeresponse['listUpdateResponses']]
for x in responses:
    print x
